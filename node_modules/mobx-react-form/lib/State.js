'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _mobx = require('mobx');

var _Options = require('./Options');

var _Options2 = _interopRequireDefault(_Options);

var _Bindings = require('./Bindings');

var _Bindings2 = _interopRequireDefault(_Bindings);

var _Events = require('./Events');

var _Events2 = _interopRequireDefault(_Events);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var State = function () {
  function State(_ref) {
    var form = _ref.form,
        initial = _ref.initial,
        options = _ref.options,
        bindings = _ref.bindings;

    _classCallCheck(this, State);

    this.strict = false;
    this.disposers = {};
    this.$struct = [];
    this.initial = {
      props: {},
      fields: {}
    };
    this.current = {
      props: {},
      fields: {}
    };

    this.set('form', form);
    this.initProps(initial);
    this.initOptions(options);
    this.initBindings(bindings);
    this.initEvents();
    this.observeOptions();
  }

  _createClass(State, [{
    key: 'initOptions',
    value: function initOptions(options) {
      this.options = new _Options2.default();
      this.options.set(options);
    }
  }, {
    key: 'initProps',
    value: function initProps(initial) {
      var $props = [].concat(_toConsumableArray(_utils2.default.iprops), _toConsumableArray(_utils2.default.vprops), _toConsumableArray(_utils2.default.fprops));
      var initialProps = (0, _pick3.default)(initial, $props);

      this.set('initial', 'props', initialProps);

      if (_utils2.default.isStruct(initial.fields) || _utils2.default.hasSeparatedProps(initial)) {
        this.strict = true;
        this.type = 'separated';
        this.struct(initial.fields);
        return;
      }

      if (_utils2.default.hasUnifiedProps(initial.fields)) {
        this.type = 'unified';
      }
    }
  }, {
    key: 'initBindings',
    value: function initBindings(bindings) {
      this.bindings = new _Bindings2.default();
      this.bindings.register(bindings);
    }
  }, {
    key: 'initEvents',
    value: function initEvents() {
      this.events = new _Events2.default();
    }

    /**
      Get/Set Fields Structure
    */

  }, {
    key: 'struct',
    value: function struct() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (data) this.$struct = data;
      return this.$struct;
    }

    /**
      Get Props/Fields
    */

  }, {
    key: 'get',
    value: function get(type, subtype) {
      return this[type][subtype];
    }

    /**
      Set Props/Fields
    */

  }, {
    key: 'set',
    value: function set(type, subtype) {
      var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

      if (type === 'form') {
        // subtype is the form here
        this.form = subtype;
      }

      if (type === 'initial') {
        Object.assign(this.initial[subtype], state);
        Object.assign(this.current[subtype], state);
      }

      if (type === 'current') {
        Object.assign(this.current[subtype], state);
      }
    }
  }, {
    key: 'observeOptions',
    value: function observeOptions() {
      var _this = this;

      // Fix Issue #201
      (0, _mobx.observe)(this.options.options, _utils2.default.checkObserve([{
        // start observing fields
        type: 'update',
        key: 'validateOnChange',
        to: true,
        exec: function exec() {
          return _this.form.forEach(function (field) {
            return field.observeValidation();
          });
        }
      }, {
        // stop observing fields
        type: 'update',
        key: 'validateOnChange',
        to: false,
        exec: function exec() {
          return _this.form.forEach(function (field) {
            return field.disposeValidation();
          });
        }
      }]));
    }
  }]);

  return State;
}();

exports.default = State;
module.exports = exports['default'];